"Curso Definitivo de HTML y CSS"

---------------CLASE 11 Tipos de imagenes---------------

Lossy vs Lossless
Con pérdida / Sin pérdida

Exiten dos tipos de imagenes, si pérdida o con pérdida, y esto depende de como el formato maneja las imágenes.

Lossless (Sin pérdida)
Los formatos de imagen si pérdida capturan todos los datos de su archivo
original. No se pierde nada del archivo original, foto u obra de arte, de
ahí el término "sin pérdida". El archivo aún puede estar comprimido, pero
todos los formatos sin pérdida podrán recontruir su imagen a su estado original.

Lossy(Con pérdida)
Los formatos de imagen con pérdida se aproximan a su imagen original. Por ejemplo,
una imagen con pérdida podría reducir la cantidad de colores en su imagen o analizar
la imagen en busca de datos innecesarios. Estos reducirá el tamaño del archivo, aunque
puede reducir la calidad de su imagen.
Por lo general, los archivos con pérdida son mucho más pequeños que los archivos sin pérdida,
lo que los hace ideales para usar en línea donde el tamaño del archivo y la velocidad de descarga
son vitales.

FORMATOS DE IMAGENES.-
GIF-Lossless (Graphics Interchange Format)
PNG 8-Lossless (Portable Network Graphic) paleta de colores de 256, para usar transparencias.
PNG 24-Lossless (Portable Network Graphic) paleta de colores de mas de 256

JPG /JPEG -Lossy (Photographic Experts Group) gama de colores ilimitada
SVG - Vector/Lossless (Scalable Vector Graphics)


Logotipos -> png o SVG
Fotografias visuales JPG
png 24 para modificar el fondo, etc


---------------CLASE 12 Optimizando imagenes---------------

En promedio una imagen debe pesar alrededor de 70 KB,

Opciones para trabajar las imágenes:
* Mejora el tamaño de tus imagenes.
    * Tiny PNG -> https://tinypng.com/


* Retira metadatos de tus imágenes
    *Verexif -> https://www.verexif.com/


---------------CLASE 16 Formularios ---------------
Etiquetas form e input

Estructura ideal de un formulario

<form action="">
    <label for="hora">
      <span>Hora</span>
      <input type="time" name="hora" id="hora">
    </label>
    <input type="submit">
</form>

---------------CLASE 26 Herencia ---------------
La Herencia en CSS es el código que se va pasar de un Padre a un Hijo
Herencia y sus valores:
Inherit. este es un valor por medio de una keyword que especifica que, a la propiedad
que se aplique debe heredar los valores de su elemento padre. Podemos decir que la palabra
inherit significa "Usa el valor de mi padre", si el elemento padre no tiene definido dicho valor
el navegador seguirá el DOM hasta que encuentre un elemento superior que lo contenga, y en última
instancia de no tenerlo nungún elemento superior se aplicara el valor por defecto.

Initial. este valor pertenece a la especificación CSS3 y cuando aplicamos a una propiedad el valor Initial
estamos dando el valor inicial y predifinido por el navegador en cuestión.

Upset. Este valor unset es una combinación entre inherit e initial, cuando utilizamos este valor en
una propiedad esta trata de heredar el valor de su elemento padre si este esta disponible, de no ser así
este valor colocará el valor de la propiedad en su valor inicial, como si usaramos inherit e initital juntos.

---------------CLASE 27 Especificidad en selectores ---------------

¿Cómo se controla el orden al declarar CSS?

La importancia es uno de los conceptos más relevantes. Si dos declaraciones tienen la misma importancia,
la especificidad de las reglas decidirá cuál se debe aplicar. Si las reglas tienen la misma especificidad, el orden de las fuentes
controla el resultado final.

1.Importancia. 
    * Hoja de estilo de agente de usuario(Estilos del navegador)
    * Declaraciones normales en hojas de estilo de autor (Nuestro .css)
    * Declaraciones importantes en hojas de estilos de autor (utilizar el !important)
    

2.Especificidad.
    Selectores        Especificidad
    !important          1.0.0.0.0
    Inline styles       0.1.0.0.0
        #id             0.0.1.0.0
        .class          0.0.0.1.0
        tag             0.0.0.0.1


3.Orden en las fuentes
 
    Conflicto en la declaracion     Diferente origen o !important   No  ¿Los selectores tienen una especificidad diferente?     No  